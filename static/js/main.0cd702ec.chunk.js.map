{"version":3,"sources":["CustomPropertiesThemeProvider.js","App.js","serviceWorker.js","index.js"],"names":["CustomPropertiesThemeProvider","props","CSSCustomProperties","Object","keys","theme","reduce","newObj","key","concat","react_default","a","createElement","styled_components_browser_esm","style","children","themeProperty","prop","propertyName","variableName","fallback","window","CSS","supports","Button","styled","button","_templateObject","defaultProps","button-color","button-border-color","App","padding","CustomPropertiesThemeProvider_CustomPropertiesThemeProvider","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2LAIMA,EAAgC,SAAAC,GACpC,IAAMC,EAAsBC,OAAOC,KAAKH,EAAMI,OAAOC,OAAO,SAC1DC,EACAC,GAIA,OADAD,EADU,KAAAE,OAAQD,IACDP,EAAMI,MAAMG,GACtBD,GAEP,IAEF,OACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeR,MAAOJ,EAAMI,OAC1BK,EAAAC,EAAAC,cAAA,OAAKE,MAAOZ,GAAsBD,EAAMc,YAQ9C,SAASC,EAAcC,EAAMC,EAAcC,EAAcC,GACvD,OAAIC,OAAOC,KAAOA,IAAIC,SAAS,QAAS,gBACtC,GAAAd,OAAUS,EAAV,YAAAT,OAAiCU,EAAjC,MAAAV,OAAkDW,EAAlD,MAEA,GAAAX,OAAUS,EAAV,MAAAT,OAA2BQ,EAAKZ,MAAMc,kRCxB1C,IAAMK,EAASC,IAAOC,OAAVC,IAUR,SAAA1B,GAAK,OACLe,EAAcf,EAAO,QAAS,eAAgB,kBAC9C,SAAAA,GAAK,OACLe,EACEf,EACA,eACA,sBACA,mBAKNuB,EAAOI,aAAe,CACpBvB,MAAO,CACLwB,eAAgB,gBAChBC,sBAAuB,kBAI3B,IAAMzB,EAAQ,CACZwB,eAAgB,iBAChBC,sBAAuB,kBAgBVC,MAbf,WACE,OACErB,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAEkB,QAAS,cACrBtB,EAAAC,EAAAC,cAAA,oEACAF,EAAAC,EAAAC,cAAA,0NACAF,EAAAC,EAAAC,cAACY,EAAD,8BACAd,EAAAC,EAAAC,cAACqB,EAAD,CAA+B5B,MAAOA,GACpCK,EAAAC,EAAAC,cAACY,EAAD,gCClCYU,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0cd702ec.chunk.js","sourcesContent":["import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\n// Convert theme into CSS Custom Properties, set these on div inside ThemeProvider\nconst CustomPropertiesThemeProvider = props => {\n  const CSSCustomProperties = Object.keys(props.theme).reduce(function (\n    newObj,\n    key\n  ) {\n    let newKey = `--${key}`;\n    newObj[newKey] = props.theme[key];\n    return newObj;\n  },\n    {});\n\n  return (\n    <ThemeProvider theme={props.theme}>\n      <div style={CSSCustomProperties}>{props.children}</div>\n    </ThemeProvider>\n  );\n};\n\n\n// Check if browser supports CSS Custom properties, if so, use them\n// otherwise, fallback to styled-components theme provider implementation\nfunction themeProperty(prop, propertyName, variableName, fallback) {\n  if (window.CSS && CSS.supports(\"color\", \"var(--color)\")) {\n    return `${propertyName}: var(--${variableName}, ${fallback});`;\n  } else {\n    return `${propertyName}: ${prop.theme[variableName]}`;\n  }\n}\n\nexport { CustomPropertiesThemeProvider, themeProperty };","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { CustomPropertiesThemeProvider, themeProperty } from \"./CustomPropertiesThemeProvider\";\n\nconst Button = styled.button`\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border-radius: 3px;\n  border-width: 2px;\n  border-style: solid;\n  background-color: #fff;\n\n  /* Theming Properties */\n  ${props =>\n    themeProperty(props, \"color\", \"button-color\", \"palevioletred\")}\n  ${props =>\n    themeProperty(\n      props,\n      \"border-color\",\n      \"button-border-color\",\n      \"palevioletred\"\n    )}\n`;\n\n/* Fallback values for default theme when using SC theme provider implementation */\nButton.defaultProps = {\n  theme: {\n    \"button-color\": \"palevioletred\",\n    \"button-border-color\": \"palevioletred\"\n  }\n};\n\nconst theme = {\n  \"button-color\": \"mediumseagreen\",\n  \"button-border-color\": \"mediumseagreen\"\n};\n\nfunction App() {\n  return (\n    <div style={{ padding: '1rem 2rem' }}>\n      <h1>styled-components-css-custom-properties-theme-provider</h1>\n      <p>Custom theme provider which uses CSS custom properties in browsers that support them, and falls back to styled components theme provider implementation in browsers that don't support CSS custom properties.</p>\n      <Button>Default Themed Button</Button>\n      <CustomPropertiesThemeProvider theme={theme}>\n        <Button>Custom Themed Button</Button>\n      </CustomPropertiesThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}