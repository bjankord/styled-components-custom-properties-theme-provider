{"version":3,"sources":["lib/CustomPropertiesThemeProvider.js","lib/themeProperty.js","App.js","index.js"],"names":["CustomPropertiesThemeProvider","props","CSSCustomProperties","Object","keys","theme","reduce","newObj","key","concat","react_default","a","createElement","styled_components_browser_esm","style","children","themeProperty","prop","propertyName","variableName","fallback","window","CSS","supports","Button","styled","button","_templateObject","defaultProps","button-color","button-border-color","App","lib_CustomPropertiesThemeProvider","href","ReactDOM","render","src_App","document","getElementById"],"mappings":"2LAuBeA,EAnBuB,SAAAC,GACpC,IAAMC,EAAsBC,OAAOC,KAAKH,EAAMI,OAAOC,OAAO,SAC1DC,EACAC,GAIA,OADAD,EADU,KAAAE,OAAQD,IACDP,EAAMI,MAAMG,GACtBD,GAEP,IAEF,OACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeR,MAAOJ,EAAMI,OAE1BK,EAAAC,EAAAC,cAAA,OAAKE,MAAOZ,GAAsBD,EAAMc,YCR/BC,MARf,SAAuBC,EAAMC,EAAcC,EAAcC,GACvD,OAAIC,OAAOC,KAAOA,IAAIC,SAAS,QAAS,gBACtC,GAAAd,OAAUS,EAAV,YAAAT,OAAiCU,EAAjC,MAAAV,OAAkDW,EAAlD,MAEA,GAAAX,OAAUS,EAAV,MAAAT,OAA2BQ,EAAKZ,MAAMc,mRCC1C,IAAMK,EAASC,IAAOC,OAAVC,IAUR,SAAA1B,GAAK,OACLe,EAAcf,EAAO,QAAS,eAAgB,kBAC9C,SAAAA,GAAK,OACLe,EACEf,EACA,eACA,sBACA,mBAKNuB,EAAOI,aAAe,CACpBvB,MAAO,CACLwB,eAAgB,gBAChBC,sBAAuB,kBAI3B,IAAMzB,EAAQ,CACZwB,eAAgB,iBAChBC,sBAAuB,kBAoBVC,MAjBf,WACE,OACErB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gEACAF,EAAAC,EAAAC,cAAA,kPACAF,EAAAC,EAAAC,cAACY,EAAD,8BACAd,EAAAC,EAAAC,cAACoB,EAAD,CAA+B3B,MAAOA,GACpCK,EAAAC,EAAAC,cAACY,EAAD,8BAEFd,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,uEAA8DF,EAAAC,EAAAC,cAAA,0DAA9D,gFAAkMF,EAAAC,EAAAC,cAAA,yCAAlM,iDACAF,EAAAC,EAAAC,cAAA,+CAAsCF,EAAAC,EAAAC,cAAA,6CAAtC,uFAAoKF,EAAAC,EAAAC,cAAA,sBAApK,oBAAwMF,EAAAC,EAAAC,cAAA,+CAAxM,gIAAiXF,EAAAC,EAAAC,cAAA,6CAAjX,mBAA2aF,EAAAC,EAAAC,cAAA,KAAGqB,KAAK,4DAAR,mDAA3a,KACAvB,EAAAC,EAAAC,cAAA,KAAGqB,KAAK,yGAAR,gBC/CNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.bcf28483.chunk.js","sourcesContent":["import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\n/* Convert theme into CSS Custom Properties, set these on div inside ThemeProvider */\nconst CustomPropertiesThemeProvider = props => {\n  const CSSCustomProperties = Object.keys(props.theme).reduce(function (\n    newObj,\n    key\n  ) {\n    let newKey = `--${key}`;\n    newObj[newKey] = props.theme[key];\n    return newObj;\n  },\n    {});\n\n  return (\n    <ThemeProvider theme={props.theme}>\n      {/* Thought, would it be better/faster to clone the style prop onto the children rather than using this div wrapper */}\n      <div style={CSSCustomProperties}>{props.children}</div>\n    </ThemeProvider>\n  );\n};\n\nexport default CustomPropertiesThemeProvider;","/* Check if browser supports CSS Custom properties, if so, use them otherwise,\nfallback to styled-components theme provider implementation */\nfunction themeProperty(prop, propertyName, variableName, fallback) {\n  if (window.CSS && CSS.supports(\"color\", \"var(--color)\")) {\n    return `${propertyName}: var(--${variableName}, ${fallback});`;\n  } else {\n    return `${propertyName}: ${prop.theme[variableName]}`;\n  }\n}\n\nexport default themeProperty;","import React from \"react\";\nimport styled from \"styled-components\";\n\n// In your app, import these from styled-components-custom-properties-theme-provider\n// e.g. import { CustomPropertiesThemeProvider, themeProperty } from \"styled-components-custom-properties-theme-provider\";\nimport { CustomPropertiesThemeProvider, themeProperty } from \"./lib\";\n\nconst Button = styled.button`\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border-radius: 3px;\n  border-width: 2px;\n  border-style: solid;\n  background-color: #fff;\n\n  /* Theming Properties */\n  ${props =>\n    themeProperty(props, \"color\", \"button-color\", \"palevioletred\")}\n  ${props =>\n    themeProperty(\n      props,\n      \"border-color\",\n      \"button-border-color\",\n      \"palevioletred\"\n    )}\n`;\n\n/* Fallback values for default theme when using SC theme provider implementation */\nButton.defaultProps = {\n  theme: {\n    \"button-color\": \"palevioletred\",\n    \"button-border-color\": \"palevioletred\"\n  }\n};\n\nconst theme = {\n  \"button-color\": \"mediumseagreen\",\n  \"button-border-color\": \"mediumseagreen\"\n};\n\nfunction App() {\n  return (\n    <div>\n      <h1>styled-components-custom-properties-theme-provider</h1>\n      <p>Custom styled-components theme provider which uses CSS custom properties in browsers that support them. Will fallback to using styled components theme provider implementation in browsers that do not support CSS custom properties.</p>\n      <Button>Default Themed Button</Button>\n      <CustomPropertiesThemeProvider theme={theme}>\n        <Button>Custom Themed Button</Button>\n      </CustomPropertiesThemeProvider>\n      <h2>Implementation Notes</h2>\n      <p>This first button use CSS Custom property fallback syntax, <code>color: var(--button-color, palevioletred);</code> for a default theme. In browsers that do not support CSS custom properties, <code>Button.defaultProps.theme</code> is used to set the default / fallback value.</p>\n      <p>This second button sits inside the <code>CustomPropertiesThemeProvider</code> component. This component defines values for the CSS custom properties used in the <code>Button</code> component. e.g. <code>--button-color: mediumseagreen;</code>. In modern browsers, the CSS custom properties work as intended. In browsers that do not support CSS custom properties, the <code>CustomPropertiesThemeProvider</code> component uses <a href=\"https://www.styled-components.com/docs/advanced/#theming\">styled-components theme provider implementation</a>.</p>\n      <a href=\"https://github.com/bjankord/styled-components-custom-properties-theme-provider/blob/master/src/App.js\">View Usage</a>\n    </div>\n  );\n}\n\nexport default App;\n","import 'react-app-polyfill/ie9';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}